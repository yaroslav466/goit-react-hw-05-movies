{"version":3,"file":"static/js/247.57f112b7.chunk.js","mappings":"mPA8DA,UAzDa,WAAO,IAADA,EAAAC,EACfC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACtBG,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAA2B,QAArBjB,EAAe,QAAfC,EAACa,EAASI,aAAK,IAAAjB,OAAA,EAAdA,EAAgBkB,YAAI,IAAAnB,EAAAA,EAAA,WAAAoB,OAAeR,IAoBlE,OAjBIS,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAoB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACN,OAAnBnB,GAAa,GAAMiB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEIC,EAAAA,EAAAA,IAAenB,GAAS,KAAD,EAApCe,EAAIC,EAAAI,KAEVzB,GAAO0B,EAAAA,EAAAA,GAAKN,IAAOC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEnBO,QAAQC,IAAGR,EAAAM,IAAM,QAEG,OAFHN,EAAAC,KAAA,GAEjBlB,GAAa,GAAOiB,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAE3B,kBAXyB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAa1BlB,GACJ,GAAG,CAACV,KAGR6B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,SAEAC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI9B,EAAY+B,QAAQJ,SAAC,YAElCjC,IAAakC,EAAAA,EAAAA,KAACI,EAAAA,EAAM,IACpB1C,EAAK2C,OAAS,IACXL,EAAAA,EAAAA,KAAA,MAAAD,SACKrC,EAAK4C,KAAI,SAAAC,GACN,OACIV,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKQ,IACDD,EAAME,aAAY,kCAAAjC,OACsB+B,EAAME,cAAY,6EAG1DC,IAAKH,EAAMI,QAGfX,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAMI,QACXX,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAMK,cAVNL,EAAMM,GAavB,QAKZ,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport { fetchMovieCast } from 'js/api';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link, useLocation, useParams } from 'react-router-dom';\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    const location = useLocation();\n    const backLinkRef = useRef(location.state?.from ?? `/movies/${movieId}`);\n\n\n    useEffect(() => {\n        const fetchSelectMovieCast = async () => {\n            setIsLoading(true);\n            try {\n                const resp = await fetchMovieCast(movieId);\n\n                setCast([...resp]);\n            } catch (err) {\n                console.log(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchSelectMovieCast();\n    }, [movieId]);\n    \nreturn (\n<>\n    <h2>\n        Cast:\n        <Link to={backLinkRef.current}>Hide</Link>\n    </h2>\n    {isLoading && <Loader />}\n    {cast.length > 0 && (\n        <ul>\n            {cast.map(actor => {\n                return (\n                    <li key={actor.id}>\n                        <img src={\n                            actor.profile_path\n                                ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                                : `https://upload.wikimedia.org/wikipedia/commons/0/0a/No-image-available.png`\n                        }\n                            alt={actor.name}\n                        />\n\n                        <h3>{actor.name}</h3>\n                        <h3>{actor.character}</h3>\n                    </li>\n                );\n            })}\n        </ul>\n    )}\n</>\n);   \n};\n\nexport default Cast;"],"names":["_location$state$from","_location$state","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","location","useLocation","backLinkRef","useRef","state","from","concat","useEffect","fetchSelectMovieCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","resp","_context","prev","next","fetchMovieCast","sent","_toConsumableArray","t0","console","log","finish","stop","apply","arguments","_jsxs","_Fragment","children","_jsx","Link","to","current","Loader","length","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}