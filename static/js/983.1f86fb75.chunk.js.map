{"version":3,"file":"static/js/983.1f86fb75.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","js/api.js","pages/HomePage.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies, title }) => {\n    const location = useLocation();\n    \n    return (\n        <div>\n            <h2>{title}</h2>\n            <ul>\n                {movies.map(movie => {\n                    return (\n                        <li key={movie.id}>\n                            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                               <img\n                  src={\n                    movie.poster_path\n                      ? `https://image.tmdb.org/t/p/w300/${movie.poster_path}`\n                      : 'https://upload.wikimedia.org/wikipedia/commons/0/0a/No-image-available.png'\n                  }\n                  alt={movie.title}\n                />\n                                <h3>{movie.title}</h3>\n                                {movie.release_date && (\n                                    <h4>{movie.release_date}</h4>\n                                )}\n                            </Link>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n\n};\nexport default MoviesList;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a4d0f7fc82f17915aa5b6f7008bd0506';\n\nexport async function fetchTrendingMovies() {\n  const resp = await axios.get(\n    `${BASE_URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`\n  );\n  return resp.data.results;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieId}?language=en-US&api_key=${API_KEY}`\n  );\n  return resp.data;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`\n  );\n  return resp.data.cast;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}`\n  );\n  return resp.data.results;\n}\n\nexport async function fetchMovieByName(query) {\n  const resp = await axios.get(\n    `${BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&page=1&api_key=${API_KEY}`\n  );\n  return resp.data.results;\n}","import Loader from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport { fetchTrendingMovies } from 'js/api';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n\nconst HomePage = () => {\n    const [movies, setMovies] = useState(null);\n    const [loading, setLoading] = useState(false);\n    \n    useEffect(() => {\n        const newFetchTrendingMovies = async () => {\n            setLoading(true);\n            try {\n                const resp = await fetchTrendingMovies();\n\n                if (resp.length === 0) {\n                    console.log('нуль результатів або помилка');\n                    return;\n                }\n                setMovies([...resp]);\n            } catch (err) {\n                console.log(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        newFetchTrendingMovies();\n    }, []);\n    \n    return (\n        <>\n            {loading && <Loader />}\n            {!loading && movies && movies.length > 0 && (\n                <MovieList movies={movies} title={'Trending today:'} />\n            )}\n        </>\n    );\n};\n    export default HomePage;"],"names":["_ref","movies","title","location","useLocation","_jsxs","children","_jsx","map","movie","Link","to","concat","id","state","from","src","poster_path","alt","release_date","BASE_URL","API_KEY","fetchTrendingMovies","_fetchTrendingMovies","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","resp","_context","prev","next","axios","sent","abrupt","data","results","stop","fetchMovieDetails","_x","_fetchMovieDetails","_callee2","movieId","_context2","fetchMovieCast","_x2","_fetchMovieCast","_callee3","_context3","cast","fetchMovieReviews","_x3","_fetchMovieReviews","_callee4","_context4","fetchMovieByName","_x4","_fetchMovieByName","_callee5","query","_context5","_useState","useState","_useState2","_slicedToArray","setMovies","_useState3","_useState4","loading","setLoading","useEffect","newFetchTrendingMovies","length","console","log","_toConsumableArray","t0","finish","_Fragment","Loader","MovieList"],"sourceRoot":""}